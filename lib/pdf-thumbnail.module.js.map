{"version":3,"file":"pdf-thumbnail.module.js","sources":["../src/pdf-thumbnail-generator.ts","../src/index.ts"],"sourcesContent":["import temp from \"temp\";\nimport { promisify } from \"util\";\nimport { exec as _exec } from \"child_process\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { rimraf } from \"rimraf\";\nimport { FilePath } from \"@chriscdn/file-cache\";\n\nconst execPromise = promisify(_exec);\n\nconst ppmExtension = \".ppm\";\nconst jpgExtension = \".jpg\";\n\nconst numberToSuffix = (n: number, ext = \"\") =>\n    `${n.toString().padStart(7, \"0\")}${ext}`;\n\nconst _normalizePPMFileNames = async (\n    folder: string,\n    prefix: string,\n): Promise<FilePath[]> => {\n    const files = await fs.readdir(folder);\n\n    const filteredFiles = files.filter((file) =>\n        file.startsWith(prefix) && file.endsWith(ppmExtension)\n    )\n        .sort((a, b) => a.localeCompare(b));\n\n    return await Promise.all(\n        filteredFiles.map(async (file, index) => {\n            const newName = `${prefix}${numberToSuffix(index, ppmExtension)}`;\n\n            const oldPath = path.join(folder, file);\n            const newPath = path.join(folder, newName);\n\n            // Rename asynchronously only if the names are different\n            if (file !== newName) {\n                await fs.rename(oldPath, newPath);\n            }\n\n            return newPath;\n        }),\n    );\n};\n\nconst _changeFileExtension = (\n    filePath: FilePath,\n    newExtension: string,\n): FilePath =>\n    path.format({\n        dir: path.dirname(filePath),\n        name: path.basename(filePath, path.extname(filePath)),\n        ext: newExtension,\n    });\n\nconst pdfToThumbnails = async (\n    {\n        pdfFilePath,\n        convert,\n        pdftoppm,\n        quality,\n        scaleTo,\n        scaleToX,\n        scaleToY,\n        range,\n    }: {\n        pdfFilePath: FilePath;\n        convert: FilePath;\n        pdftoppm: FilePath;\n        quality: number;\n        scaleTo?: number;\n        scaleToX?: number;\n        scaleToY?: number;\n        range: [number, number];\n    },\n) => {\n    const _thumbnailPath = await temp.mkdir(\"pdf-thumbnails\");\n\n    const suffix = path.basename(pdfFilePath);\n    const suffix2 = `${suffix}-`;\n\n    let filePaths = (await fs.readdir(_thumbnailPath)).filter((file) =>\n        path.extname(file) === jpgExtension\n    );\n\n    if (filePaths.length === 0) {\n        const ppmRoot = path.resolve(_thumbnailPath, suffix);\n\n        await execPromise(\n            `${pdftoppm} \\\n                -f ${range[0]} \\\n                -l ${range[1]} \\\n                ${scaleTo ? `-scale-to ${scaleTo}` : \"\"} \\\n                ${scaleToX ? `-scale-to-x ${scaleToX}` : \"\"} \\\n                ${scaleToY ? `-scale-to-y ${scaleToY}` : \"\"} \\\n                ${pdfFilePath} \\\n                ${ppmRoot} \\\n                `,\n        );\n\n        const ppmPaths = await _normalizePPMFileNames(\n            _thumbnailPath,\n            suffix2,\n        );\n\n        filePaths = await Promise.all(\n            ppmPaths.map(async (ppmFilePath) => {\n                // should always be .ppm -> .jpg\n                const jpgFilePath = _changeFileExtension(\n                    ppmFilePath,\n                    jpgExtension,\n                );\n\n                await execPromise(\n                    `${convert} -quality ${quality} ${ppmFilePath} ${jpgFilePath}`,\n                );\n\n                // fire and forget, delete and fail silently\n                rimraf(ppmFilePath).catch((_) => {});\n\n                return jpgFilePath;\n            }),\n        );\n    }\n\n    return filePaths;\n};\n\nexport { pdfToThumbnails };\n","import {\n    FileCache,\n    FileCacheOptions,\n    type FilePath,\n} from \"@chriscdn/file-cache\";\nimport { pdfToThumbnails } from \"./pdf-thumbnail-generator.js\";\nimport fs from \"fs/promises\";\nimport { PDFDocument } from \"pdf-lib\";\n\nconst pageCount = async (filePath: FilePath): Promise<number> => {\n    try {\n        // Read the PDF file as a buffer\n        const data = await fs.readFile(filePath);\n\n        // Load the PDF document asynchronously\n        const pdfDoc = await PDFDocument.load(data);\n\n        // Get the page count\n        return pdfDoc.getPageCount();\n    } catch (error) {\n        console.error(\"Error reading PDF:\", error);\n        throw new Error(\"Failed to get page count\");\n    }\n};\n\ntype PDFArgs = {\n    pdfFilePath: FilePath;\n    pageIndex: number; // 0-based\n};\n\nexport type PDFThumbnailFileCacheOptions =\n    & Omit<\n        FileCacheOptions<PDFArgs>,\n        \"cb\" | \"ext\"\n    >\n    & {\n        quality?: number;\n        pdftoppm?: FilePath;\n        convert?: FilePath;\n        scaleTo?: number;\n        scaleToX?: number;\n        scaleToY?: number;\n    };\n\n/**\n * Extend FileCache with a few default options.\n */\nclass PDFThumbnailFileCache extends FileCache<PDFArgs> {\n    /**\n     * Override the constructor to default the `ext` and `cb` parameters.\n     *\n     * @param args\n     */\n    constructor(args: PDFThumbnailFileCacheOptions) {\n        super({\n            ...args,\n            ext: () => \".jpg\",\n            cb: async (filePath, { pdfFilePath, pageIndex }) => {\n                const pageNumber = pageIndex + 1;\n\n                console.log({\n                    pdfFilePath,\n                    quality: args.quality ?? 70,\n                    pdftoppm: args.pdftoppm ?? \"pdftoppm\",\n                    convert: args.convert ?? \"convert\",\n                    range: [pageNumber, pageNumber],\n                    scaleTo: args.scaleTo,\n                    scaleToX: args.scaleToX,\n                    scaleToY: args.scaleToY,\n                });\n\n                // All PDF pages as an array of file paths. These are sorted by page order.\n                const filePaths = await pdfToThumbnails(\n                    {\n                        pdfFilePath,\n                        quality: args.quality ?? 70,\n                        pdftoppm: args.pdftoppm ?? \"pdftoppm\",\n                        convert: args.convert ?? \"convert\",\n                        range: [pageNumber, pageNumber],\n                        scaleTo: args.scaleTo,\n                        scaleToX: args.scaleToX,\n                        scaleToY: args.scaleToY,\n                    },\n                );\n\n                await fs.copyFile(filePaths[0], filePath);\n            },\n        });\n    }\n\n    /**\n     * The page count, or the number of pages returned by pdf2ppm.\n     *\n     * @param pdfFilePath\n     * @returns\n     */\n    async pageCount(pdfFilePath: FilePath) {\n        return pageCount(pdfFilePath);\n    }\n}\n\nexport { PDFThumbnailFileCache };\n"],"names":["execPromise","promisify","_exec","ppmExtension","jpgExtension","numberToSuffix","n","ext","toString","padStart","_normalizePPMFileNames","folder","prefix","files","fs","readdir","filteredFiles","filter","file","startsWith","endsWith","sort","a","b","localeCompare","Promise","all","map","index","newName","oldPath","path","join","newPath","rename","_changeFileExtension","filePath","newExtension","format","dir","dirname","name","basename","extname","pdfToThumbnails","pdfFilePath","convert","pdftoppm","quality","scaleTo","scaleToX","scaleToY","range","_thumbnailPath","temp","mkdir","suffix","suffix2","filePaths","length","ppmRoot","resolve","ppmPaths","ppmFilePath","jpgFilePath","rimraf","catch","_","pageCount","data","readFile","pdfDoc","PDFDocument","load","getPageCount","error","console","Error","PDFThumbnailFileCache","FileCache","constructor","args","cb","pageIndex","_args$quality","_args$pdftoppm","_args$convert","_args$quality2","_args$pdftoppm2","_args$convert2","pageNumber","log","copyFile"],"mappings":"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"}